(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{364:function(n,e,a){"use strict";a.r(e);var t=a(42),i=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"arduino"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arduino"}},[n._v("#")]),n._v(" Arduino")]),n._v(" "),a("h2",{attrs:{id:"bibliotecas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bibliotecas"}},[n._v("#")]),n._v(" Bibliotecas")]),n._v(" "),a("p",[n._v("Necesitaremos instalar la biblioteca ArduinoJson")]),n._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/bblanchon/ArduinoJson",target:"_blank",rel:"noopener noreferrer"}},[n._v("ArduinoJson"),a("OutboundLink")],1)]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#include <WiFi.h>\n#include <HTTPClient.h>\n#include <ArduinoJson.h>\n")])])]),a("h2",{attrs:{id:"asignar-pines"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asignar-pines"}},[n._v("#")]),n._v(" Asignar pines")]),n._v(" "),a("p",[n._v("Asignaremos:")]),n._v(" "),a("ul",[a("li",[n._v("Los pines de los relés")]),n._v(" "),a("li",[n._v("Los pines de los interruptores")]),n._v(" "),a("li",[n._v("Los pines de los sensores que utilicemos")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#define RELE1PIN 19 \n#define RELE2PIN 22 \n#define RELE3PIN 21 \n\n#define INTERRUPTOR1PIN 35\n#define INTERRUPTOR2PIN 34\n#define INTERRUPTOR3PIN 33\n\n#define DHTPIN 23\n#define DHTTYPE DHT11\n")])])]),a("h2",{attrs:{id:"definir-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definir-variables"}},[n._v("#")]),n._v(" Definir variables")]),n._v(" "),a("p",[n._v("Definiremos variables")]),n._v(" "),a("ul",[a("li",[n._v("Variables de estado ON - OFF")]),n._v(" "),a("li",[n._v("Variables de los sensores utilizados")]),n._v(" "),a("li",[n._v("Credenciales para la conexión")]),n._v(" "),a("li",[n._v("Un "),a("strong",[n._v("objeto json")]),n._v(" para enviar datos a la base de datos")]),n._v(" "),a("li",[n._v("Una variable "),a("strong",[n._v("String")]),n._v(" para obtener los datos de la base de datos")]),n._v(" "),a("li",[n._v("Un identificador "),a("strong",[n._v("id")]),n._v(" para el envío de datos")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('bool state1;\nbool state2;\nbool state3;\n\nfloat temp;\nfloat hum;\n\nconst char* ssid = "studio";\nconst char* password =  "88888888";\n\nchar objetoJson[128];\n\nint id = 1;\n\nString payload; \n')])])]),a("h2",{attrs:{id:"funcion-void-setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#funcion-void-setup"}},[n._v("#")]),n._v(" Función -> void setup()")]),n._v(" "),a("ul",[a("li",[n._v("Definir baudios")]),n._v(" "),a("li",[n._v("Modo del pin entrada/salida")]),n._v(" "),a("li",[n._v("Llamada a métodos de los sensores")]),n._v(" "),a("li",[n._v("Conexión a la red WiFi")]),n._v(" "),a("li",[n._v("IP local de la placa ESP32")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('Serial.begin(115200);\n\n  pinMode(RELE1PIN, OUTPUT);\n  pinMode(RELE2PIN, OUTPUT);\n  pinMode(RELE3PIN, OUTPUT);\n\n  pinMode(INTERRUPTOR1PIN, INPUT);\n  pinMode(INTERRUPTOR2PIN, INPUT);\n  pinMode(INTERRUPTOR3PIN, INPUT);\n\n  pinMode(DHTPIN, INPUT);\n\n  dht.begin();\n  \n  WiFi.begin(ssid, password);\n  Serial.print("Conectando...");\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(".");\n  }\n\n  Serial.print("Conexión Wifi establecida, mi dirección IP es: ");\n  Serial.println(WiFi.localIP());\n')])])]),a("h2",{attrs:{id:"funcion-void-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#funcion-void-loop"}},[n._v("#")]),n._v(" Función -> void loop()")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('if ((WiFi.status()== WL_CONNECTED)) {  \n\n  temp = dht.readTemperature();\n  hum = dht.readHumidity();\n    if (isnan(temp) || isnan(hum)) {\n    Serial.println(F("¡Error en la lectura del sensor DHT!"));\n    return;\n  }\n\n\tconst size_t CAPACITY = JSON_OBJECT_SIZE(6);\n    StaticJsonDocument<CAPACITY> doc;\n\n    JsonObject obj= doc.to<JsonObject>();\n    obj ["id"] = id;\n    obj ["luz1"] = state1;\n    obj ["luz2"] = state2;\n    obj ["luz3"] = state3;\n    obj ["temperatura"] = temp;\n    obj ["humedad"] = hum;\n    \n    serializeJson (doc, objetoJson);\n    Serial.println("Objeto json: ");\n    Serial.println(objetoJson);\n\n  UpdateById( 1, objetoJson);  // ACTUALIZAMOS LA BASE DE DATOS\n\n  String datos = GetById(1);\n  \n  char documentoJson[500];\n        datos.replace(" ", "");\n        datos.replace("\\n", "");\n        datos.trim();\n        datos.remove(0,1);\n        datos.remove(payload.length()-1, 1);\n        datos.toCharArray(documentoJson, 500);\n\n        Serial.println(datos);\n        \n        StaticJsonDocument<200> documento;\n        deserializeJson( documento, documentoJson);\n\n        state1 = documento["luz1"];\n        state2 = documento["luz2"];\n        state3 = documento["luz3"];\n\n        Serial.println(state1);\n        Serial.println(state2);\n        Serial.println(state3);\n        \n  if (digitalRead(INTERRUPTOR1PIN) == LOW) {\n    state1 = !state1;\n    digitalWrite(RELE1PIN, state1);\n    } else {\n    state1 = !state1;\n    digitalWrite(RELE1PIN, state1);\n    Serial.println("Estado del relé es: ");\n    Serial.println(state1);\n  }      \n      \n  if (state1 == true) {\n    digitalWrite(RELE1PIN, HIGH);\n    Serial.println("encendido1");\n  } else {\n    digitalWrite(RELE1PIN, LOW);\n    Serial.println("apagado1");\n  }\n  \n  if (state2 == true) {\n    digitalWrite(RELE2PIN, HIGH);\n    Serial.println("encendido2");\n  } else {\n    digitalWrite(RELE2PIN, LOW);\n    Serial.println("apagado2");\n  }\n\n  if (state3 == true) {\n    digitalWrite(RELE3PIN, HIGH);\n    Serial.println("encendido3");\n  } else {\n    digitalWrite(RELE3PIN, LOW);\n    Serial.println("apagado3");\n  }\n  \n  }  \n   else {\n    Serial.println("Conexión perdida");\n  } \n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);